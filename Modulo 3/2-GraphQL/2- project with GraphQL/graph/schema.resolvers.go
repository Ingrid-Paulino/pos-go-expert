package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/Ingrid-Paulino/GraphQL/graph/model"
)

// Courses is the resolver for the courses field. --- Funcao de relacionamento
// retorna um relacionamento com categorias
// Query para testar no playground http://localhost:8080/
//
//	query queryCategoriesWithCourses {
//	 categories {
//	   id
//	   name
//	   courses { //aqui estou chamando a função Courses,
//	     id
//	     name
//	   }
//	 }
//	}
//
// essa query retorna as categorias com os cursos, pra mim olhando o codigo não fez sentido
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	courses, err := r.CourseDB.FindByCategoryID(obj.ID)
	if err != nil {
		return nil, err
	}
	var coursesModel []*model.Course
	for _, courses := range courses {
		coursesModel = append(coursesModel, &model.Course{
			ID:          courses.ID,
			Name:        courses.Name,
			Description: &courses.Description,
		})
	}
	return coursesModel, nil
}

// Category is the resolver for the category field.
// retorna um relacionamento com cursos
// Query para testar no playground http://localhost:8080/
//
//	query queryCoursesWithCategory {
//		courses {
//			id
//			name
//			description
//			category {
//				id
//				name
//				description
//			}
//		}
//	}
//
// essa query retorna as categorias com os cursos, pra mim olhando o codigo não fez sentido
func (r *courseResolver) Category(ctx context.Context, obj *model.Course) (*model.Category, error) {
	category, err := r.CategoryDB.FindByCourseID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateCategory is the resolver for the createCategory field.
// Query para testar no playground http://localhost:8080/
//
//	mutation createCategory {
//	 createCategory(input: {name: "Tecnologia 3", description: "Curso de tecnologia"}) {
//	   id
//	   name
//	   description
//	 }
//	}
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDB.Create(input.Name, *input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          category.ID,
		Name:        category.Name,
		Description: &category.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
//
//	mutation createCourse {
//	 createCourse(input: {name: "Curso de GraphQL2", description: "Descrição do curso de GraphQL", categoryId: "8a33f653-c59c-4c1c-995f-0e20e062003b"}) {
//	   id
//	   name
//	 }
//	}
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	course, err := r.CourseDB.Create(input.Name, *input.Description, input.CategoryID)
	if err != nil {
		return nil, err
	}
	return &model.Course{
		ID:          course.ID,
		Name:        course.Name,
		Description: &course.Description,
	}, nil
}

// Categories is the resolver for the categories field.
// Query para testar no playground http://localhost:8080/
//
//	query queryCategories {
//	 categories {
//	   id
//	   name
//	   description
//	 }
//	}
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.FindAll()
	if err != nil {
		return nil, err
	}
	var categoriesModel []*model.Category
	for _, category := range categories {
		categoriesModel = append(categoriesModel, &model.Category{
			ID:          category.ID,
			Name:        category.Name,
			Description: &category.Description,
		})
	}
	return categoriesModel, nil
}

// Courses is the resolver for the courses field.
// Query para testar no playground http://localhost:8080/
//
//	query queryCourses {
//	 courses {
//	   id
//	   name
//	 }
//	}
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDB.FindAll()
	if err != nil {
		return nil, err
	}
	var coursesModel []*model.Course
	for _, course := range courses {
		coursesModel = append(coursesModel, &model.Course{
			ID:          course.ID,
			Name:        course.Name,
			Description: &course.Description,
		})
	}
	return coursesModel, nil
}

//As funcoes 	Category, Course, categoryResolver, courseResolver foi geradas da segunda vez que rodei o generate, apos o relacionamento feito com a separação dos modelos e da adção dos models no aquivo gqlgen.yml

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
